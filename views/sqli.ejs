<!DOCTYPE html>
<html>

</html>

<body>
    <h2>Check number of trains running from Delhi to your city</h2><br>
    <input type="text" id="val1" value="Delhi" readonly> <br><br>to<br><br>
    <select name="Cars" id="val2" size="5">
        <option value="Kolkata"> kolkata </option>
        <option value="Mumabi"> Mumbai </option>
        <option value="Lucknow"> Lucknow </option>
        <option value="Chennai"> Chennai </option>
        <option value="Ahmedabad"> Ahmedabad </option>
    </select>
    
    <input type="button" value="Submit" onclick="submit()">
    <h5>
        <pre id="result"></pre>
    </h5>
    <script>
        function submit() {
            var xhr = new XMLHttpRequest();
            xhr.onreadystatechange = function () {
                if (xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) {
                    const res = JSON.parse(xhr.responseText);
                    document.getElementById("result").innerHTML = "Number of trains " + res[0].ntrains + ".";
                }
            }
            xhr.open('GET', 'http://tauheedkhan.com/sqli/' + val1.value + '-' + val2.value, true);
            xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            xhr.withCredentials = true;
            xhr.send();
        }
    </script>
    <h3>
        Vulnerable Code:
    </h3>
    <h3><pre>
```
router.get('/sqli/:from-:to', vuln_handler.sqli_check_train_get);
...
const sqli_check_train_get = (req, res) => {
const from = req.params.from;
const to = req.params.to;
const q = "SELECT ntrains FROM trains where from_stnt='"+ from +"' and to_stnt='"+to+"';";
//Debug query console.log(q);
pool.query(q, (error, results) => {
    if (error) {
        res.send(error);
        } else {
            res.send(JSON.stringify(results.rows))
        }
    })
}
```
</pre>
</h3>
Vulnerability is arising because application code is not validating user    supplied input before concatinating it into the SQL query which leads to sql injection. Instead of 
directly adding user supplied input to sql query use prepared statements to protect agains sql injection
attacks or use Train model to get details.
<br><br>
<a href="/sqli-fixed">Fixed SQL Injection</a>
<br><br>
</body>

</html>
